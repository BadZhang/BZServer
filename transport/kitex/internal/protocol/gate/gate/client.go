// Code generated by Kitex v0.9.1. DO NOT EDIT.

package gate

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	gate "github.com/dobyte/due/transport/kitex/v2/internal/protocol/gate"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Bind(ctx context.Context, req *gate.BindRequest, callOptions ...callopt.Option) (r *gate.BindResponse, err error)
	Unbind(ctx context.Context, req *gate.UnbindRequest, callOptions ...callopt.Option) (r *gate.UnbindResponse, err error)
	GetIP(ctx context.Context, req *gate.GetIPRequest, callOptions ...callopt.Option) (r *gate.GetIPResponse, err error)
	Stat(ctx context.Context, req *gate.StatRequest, callOptions ...callopt.Option) (r *gate.StatResponse, err error)
	Disconnect(ctx context.Context, req *gate.DisconnectRequest, callOptions ...callopt.Option) (r *gate.DisconnectResponse, err error)
	Push(ctx context.Context, req *gate.PushRequest, callOptions ...callopt.Option) (r *gate.PushResponse, err error)
	Multicast(ctx context.Context, req *gate.MulticastRequest, callOptions ...callopt.Option) (r *gate.MulticastResponse, err error)
	Broadcast(ctx context.Context, req *gate.BroadcastRequest, callOptions ...callopt.Option) (r *gate.BroadcastResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kGateClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kGateClient struct {
	*kClient
}

func (p *kGateClient) Bind(ctx context.Context, req *gate.BindRequest, callOptions ...callopt.Option) (r *gate.BindResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Bind(ctx, req)
}

func (p *kGateClient) Unbind(ctx context.Context, req *gate.UnbindRequest, callOptions ...callopt.Option) (r *gate.UnbindResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Unbind(ctx, req)
}

func (p *kGateClient) GetIP(ctx context.Context, req *gate.GetIPRequest, callOptions ...callopt.Option) (r *gate.GetIPResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetIP(ctx, req)
}

func (p *kGateClient) Stat(ctx context.Context, req *gate.StatRequest, callOptions ...callopt.Option) (r *gate.StatResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Stat(ctx, req)
}

func (p *kGateClient) Disconnect(ctx context.Context, req *gate.DisconnectRequest, callOptions ...callopt.Option) (r *gate.DisconnectResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Disconnect(ctx, req)
}

func (p *kGateClient) Push(ctx context.Context, req *gate.PushRequest, callOptions ...callopt.Option) (r *gate.PushResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Push(ctx, req)
}

func (p *kGateClient) Multicast(ctx context.Context, req *gate.MulticastRequest, callOptions ...callopt.Option) (r *gate.MulticastResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Multicast(ctx, req)
}

func (p *kGateClient) Broadcast(ctx context.Context, req *gate.BroadcastRequest, callOptions ...callopt.Option) (r *gate.BroadcastResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Broadcast(ctx, req)
}
